[
    {
      "name": "Maximum Depth of Binary Tree",
      "difficulty": "Easy",
      "instructions": "# Given the root of a binary tree, return its maximum depth.\n# A binary tree's maximum depth is the number of nodes along the longest path from the root down to the farthest leaf node.",
      "examples": "# Input: root=[3,9,20,null,null,15,7] -> 3",
      "optimal solution": "# DFS approach:\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef maxDepth(root):\n    if not root:\n        return 0\n    return 1 + max(maxDepth(root.left), maxDepth(root.right))",
      "efficiency": "O(n)",
      "patterns involved": ["Tree Traversal", "DFS"],
      "solved": false
    },
    {
      "name": "Symmetric Tree",
      "difficulty": "Easy",
      "instructions": "# Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
      "examples": "# Input: root=[1,2,2,3,4,4,3] -> True",
      "optimal solution": "# Recursive check:\ndef isSymmetric(root):\n    def isMirror(left, right):\n        if not left and not right:\n            return True\n        if not left or not right:\n            return False\n        return (left.val == right.val\n                and isMirror(left.left, right.right)\n                and isMirror(left.right, right.left))\n    if not root:\n        return True\n    return isMirror(root.left, root.right)",
      "efficiency": "O(n)",
      "patterns involved": ["Tree Traversal", "DFS"],
      "solved": false
    },
    {
      "name": "Same Tree",
      "difficulty": "Easy",
      "instructions": "# Given the roots of two binary trees p and q, write a function to check if they are the same or not.\n# Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
      "examples": "# Input: p=[1,2,3], q=[1,2,3] -> True\n# Input: p=[1,2], q=[1,null,2] -> False",
      "optimal solution": "# Recursive check:\ndef isSameTree(p, q):\n    if not p and not q:\n        return True\n    if not p or not q or p.val != q.val:\n        return False\n    return isSameTree(p.left, q.left) and isSameTree(p.right, q.right)",
      "efficiency": "O(n)",
      "patterns involved": ["Tree Traversal"],
      "solved": false
    },
    {
      "name": "Invert Binary Tree",
      "difficulty": "Easy",
      "instructions": "# Given the root of a binary tree, invert the tree, and return its root.",
      "examples": "# Input: [4,2,7,1,3,6,9] -> [4,7,2,9,6,3,1]",
      "optimal solution": "# Recursive swap:\ndef invertTree(root):\n    if not root:\n        return None\n    root.left, root.right = invertTree(root.right), invertTree(root.left)\n    return root",
      "efficiency": "O(n)",
      "patterns involved": ["Tree Traversal", "DFS"],
      "solved": false
    },
    {
      "name": "Validate Binary Search Tree",
      "difficulty": "Medium",
      "instructions": "# Given the root of a binary tree, determine if it is a valid binary search tree (BST).",
      "examples": "# Input: [2,1,3] -> True\n# Input: [5,1,4,null,null,3,6] -> False",
      "optimal solution": "# Inorder traversal check:\ndef isValidBST(root):\n    def helper(node, low, high):\n        if not node:\n            return True\n        if node.val <= low or node.val >= high:\n            return False\n        return helper(node.left, low, node.val) and helper(node.right, node.val, high)\n    return helper(root, float('-inf'), float('inf'))",
      "efficiency": "O(n)",
      "patterns involved": ["Tree Traversal", "DFS"],
      "solved": false
    },
    {
      "name": "Binary Tree Level Order Traversal",
      "difficulty": "Medium",
      "instructions": "# Given the root of a binary tree, return the level order traversal of its nodes' values.",
      "examples": "# Input: [3,9,20,null,null,15,7] -> [[3],[9,20],[15,7]]",
      "optimal solution": "# BFS approach:\nfrom collections import deque\n\ndef levelOrder(root):\n    res = []\n    if not root:\n        return res\n    queue = deque([root])\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.popleft()\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        res.append(level)\n    return res",
      "efficiency": "O(n)",
      "patterns involved": ["BFS", "Queue"],
      "solved": false
    },
    {
      "name": "Construct Binary Tree from Preorder and Inorder Traversal",
      "difficulty": "Medium",
      "instructions": "# Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree\n# and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
      "examples": "# Input: preorder=[3,9,20,15,7], inorder=[9,3,15,20,7] -> the constructed tree",
      "optimal solution": "# Recursive build:\ndef buildTree(preorder, inorder):\n    if not preorder or not inorder:\n        return None\n    root_val = preorder[0]\n    root_index = inorder.index(root_val)\n    root = TreeNode(root_val)\n    root.left = buildTree(preorder[1:1+root_index], inorder[:root_index])\n    root.right = buildTree(preorder[1+root_index:], inorder[root_index+1:])\n    return root",
      "efficiency": "O(n^2) in worst case; O(n) if using hashmap",
      "patterns involved": ["Tree Construction", "DFS"],
      "solved": false
    },
    {
      "name": "Populating Next Right Pointers in Each Node",
      "difficulty": "Medium",
      "instructions": "# You are given a perfect binary tree where all leaves are on the same level.\n# Populate each next pointer to point to its next right node.",
      "examples": "# Input: [1,2,3,4,5,6,7] -> next pointers connect each node with its right sibling",
      "optimal solution": "# BFS approach:\nfrom collections import deque\n\nclass Node:\n    def __init__(self, val=0, left=None, right=None, next=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\ndef connect(root):\n    if not root:\n        return None\n    queue = deque([root])\n    while queue:\n        size = len(queue)\n        for i in range(size):\n            node = queue.popleft()\n            if i < size - 1:\n                node.next = queue[0]\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n    return root",
      "efficiency": "O(n)",
      "patterns involved": ["BFS", "Tree Linking"],
      "solved": false
    },
    {
      "name": "Serialize and Deserialize Binary Tree",
      "difficulty": "Hard",
      "instructions": "# Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization\n# algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized\n# to the original tree structure.",
      "examples": "# Input: root = [1,2,3,null,null,4,5] -> Output: same tree after serialize->deserialize",
      "optimal solution": "# BFS or DFS approach:\nfrom collections import deque\n\nclass Codec:\n    def serialize(self, root):\n        if not root:\n            return ''\n        queue = deque([root])\n        res = []\n        while queue:\n            node = queue.popleft()\n            if node:\n                res.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                res.append('null')\n        return ','.join(res)\n\n    def deserialize(self, data):\n        if not data:\n            return None\n        nodes = data.split(',')\n        root = TreeNode(int(nodes[0]))\n        queue = deque([root])\n        i = 1\n        while queue and i < len(nodes):\n            node = queue.popleft()\n            if nodes[i] != 'null':\n                node.left = TreeNode(int(nodes[i]))\n                queue.append(node.left)\n            i += 1\n            if i < len(nodes) and nodes[i] != 'null':\n                node.right = TreeNode(int(nodes[i]))\n                queue.append(node.right)\n            i += 1\n        return root",
      "efficiency": "O(n)",
      "patterns involved": ["BFS", "Tree Serialization"],
      "solved": false
    },
    {
      "name": "Word Search II",
      "difficulty": "Hard",
      "instructions": "# Given an m x n board of characters and a list of words, return all words on the board.\n# Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically.\n# The same letter cell may not be used more than once in a word.",
      "examples": "# Input: board=[['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words=['oath','pea','eat','rain'] -> ['oath','eat']",
      "optimal solution": "# Trie + Backtracking:\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.endOfWord = False\n\nclass Solution:\n    def findWords(self, board, words):\n        root = TrieNode()\n        for w in words:\n            self.insert(root, w)\n\n        self.res = set()\n        self.rows, self.cols = len(board), len(board[0])\n        for r in range(self.rows):\n            for c in range(self.cols):\n                self.dfs(board, r, c, root, '')\n        return list(self.res)\n\n    def insert(self, root, word):\n        cur = root\n        for ch in word:\n            if ch not in cur.children:\n                cur.children[ch] = TrieNode()\n            cur = cur.children[ch]\n        cur.endOfWord = True\n\n    def dfs(self, board, r, c, node, path):\n        if r < 0 or r >= self.rows or c < 0 or c >= self.cols:\n            return\n        char = board[r][c]\n        if char == '#' or char not in node.children:\n            return\n        node = node.children[char]\n        new_path = path + char\n        if node.endOfWord:\n            self.res.add(new_path)\n        board[r][c] = '#'\n        for dr, dc in [(1,0),(-1,0),(0,1),(0,-1)]:\n            self.dfs(board, r+dr, c+dc, node, new_path)\n        board[r][c] = char",
      "efficiency": "O(M*N*4^L) in worst case, L= max word length",
      "patterns involved": ["Trie", "Backtracking", "DFS"],
      "solved": false
    }
  ]