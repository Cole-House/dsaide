[
    {
      "name": "Merge Sorted Array",
      "difficulty": "Easy",
      "instructions": "# You are given two integer arrays nums1 and nums2, sorted in non-decreasing order.\n# Merge nums2 into nums1 as one sorted array in-place.",
      "examples": "# Input: nums1=[1,2,3,0,0,0], m=3, nums2=[2,5,6], n=3 -> nums1 becomes [1,2,2,3,5,6]",
      "optimal solution": "# Two pointers from end:\ndef merge(nums1, m, nums2, n):\n    p1, p2, p = m - 1, n - 1, m + n - 1\n    while p1 >= 0 and p2 >= 0:\n        if nums1[p1] > nums2[p2]:\n            nums1[p] = nums1[p1]\n            p1 -= 1\n        else:\n            nums1[p] = nums2[p2]\n            p2 -= 1\n        p -= 1\n    while p2 >= 0:\n        nums1[p] = nums2[p2]\n        p2 -= 1\n        p -= 1",
      "efficiency": "O(m+n)",
      "patterns involved": ["Two Pointers", "In-place Merge"],
      "solved": false
    },
    {
      "name": "Valid Palindrome",
      "difficulty": "Easy",
      "instructions": "# Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.",
      "examples": "# Input: s = 'A man, a plan, a canal: Panama' -> True\n# Input: s = 'race a car' -> False",
      "optimal solution": "# Two pointers approach:\ndef isPalindrome(s):\n    left, right = 0, len(s) - 1\n    while left < right:\n        while left < right and not s[left].isalnum():\n            left += 1\n        while left < right and not s[right].isalnum():\n            right -= 1\n        if s[left].lower() != s[right].lower():\n            return False\n        left += 1\n        right -= 1\n    return True",
      "efficiency": "O(n)",
      "patterns involved": ["Two Pointers", "String Manipulation"],
      "solved": false
    },
    {
      "name": "Remove Element",
      "difficulty": "Easy",
      "instructions": "# Given an integer array nums and an integer val, remove all occurrences of val in-place and return the new length.",
      "examples": "# Input: nums = [3,2,2,3], val = 3 -> Output length = 2, nums = [2,2,...]\n# Input: nums = [0,1,2,2,3,0,4,2], val = 2 -> Output length = 5",
      "optimal solution": "# Two pointers approach:\ndef removeElement(nums, val):\n    slow = 0\n    for fast in range(len(nums)):\n        if nums[fast] != val:\n            nums[slow] = nums[fast]\n            slow += 1\n    return slow",
      "efficiency": "O(n)",
      "patterns involved": ["Two Pointers", "In-place Mutation"],
      "solved": false
    },
    {
      "name": "Reverse String",
      "difficulty": "Easy",
      "instructions": "# Write a function that reverses a string. The input is given as a list of characters s.\n# Modify the input list in-place.",
      "examples": "# Input: s = ['h','e','l','l','o'] -> ['o','l','l','e','h']",
      "optimal solution": "# Two pointers approach:\ndef reverseString(s):\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1",
      "efficiency": "O(n)",
      "patterns involved": ["Two Pointers"],
      "solved": false
    },
    {
      "name": "3Sum",
      "difficulty": "Medium",
      "instructions": "# Given an integer array nums, return all triplets [nums[i], nums[j], nums[k]] such that they sum to 0.",
      "examples": "# Input: [-1,0,1,2,-1,-4] -> [[-1,-1,2],[-1,0,1]]",
      "optimal solution": "# Two pointers after sorting:\ndef threeSum(nums):\n    nums.sort()\n    res = []\n    for i in range(len(nums)):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        left, right = i+1, len(nums)-1\n        while left < right:\n            summ = nums[i] + nums[left] + nums[right]\n            if summ < 0:\n                left += 1\n            elif summ > 0:\n                right -= 1\n            else:\n                res.append([nums[i], nums[left], nums[right]])\n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                left += 1\n                right -= 1\n    return res",
      "efficiency": "O(n^2)",
      "patterns involved": ["Two Pointers", "Sorting"],
      "solved": false
    },
    {
      "name": "3Sum Closest",
      "difficulty": "Medium",
      "instructions": "# Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.",
      "examples": "# Input: nums = [-1,2,1,-4], target = 1 -> Closest sum = 2",
      "optimal solution": "# Two pointers approach:\ndef threeSumClosest(nums, target):\n    nums.sort()\n    closest = float('inf')\n    for i in range(len(nums)-2):\n        left, right = i+1, len(nums)-1\n        while left < right:\n            s = nums[i] + nums[left] + nums[right]\n            if abs(target - s) < abs(target - closest):\n                closest = s\n            if s < target:\n                left += 1\n            elif s > target:\n                right -= 1\n            else:\n                return s\n    return closest",
      "efficiency": "O(n^2)",
      "patterns involved": ["Two Pointers", "Sorting"],
      "solved": false
    },
    {
      "name": "Container With Most Water",
      "difficulty": "Medium",
      "instructions": "# You are given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai).\n# Find two lines that together with the x-axis form a container that holds the most water.",
      "examples": "# Input: [1,8,6,2,5,4,8,3,7] -> Max area = 49",
      "optimal solution": "# Two pointers approach:\ndef maxArea(height):\n    left, right = 0, len(height)-1\n    max_water = 0\n    while left < right:\n        width = right - left\n        h = min(height[left], height[right])\n        max_water = max(max_water, width * h)\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_water",
      "efficiency": "O(n)",
      "patterns involved": ["Two Pointers"],
      "solved": false
    },
    {
      "name": "Sort Colors",
      "difficulty": "Medium",
      "instructions": "# Given an array nums with n objects colored red, white, or blue (represented by 0,1,2), sort them in-place so that\n# the same colors are adjacent, in the order red, white, and blue.",
      "examples": "# Input: [2,0,2,1,1,0] -> [0,0,1,1,2,2]",
      "optimal solution": "# Dutch National Flag (two/three pointers):\ndef sortColors(nums):\n    low, mid, high = 0, 0, len(nums)-1\n    while mid <= high:\n        if nums[mid] == 0:\n            nums[low], nums[mid] = nums[mid], nums[low]\n            low += 1\n            mid += 1\n        elif nums[mid] == 2:\n            nums[mid], nums[high] = nums[high], nums[mid]\n            high -= 1\n        else:\n            mid += 1",
      "efficiency": "O(n)",
      "patterns involved": ["Two Pointers", "In-place Partitioning"],
      "solved": false
    },
    {
      "name": "Trapping Rain Water",
      "difficulty": "Hard",
      "instructions": "# Given n non-negative integers representing an elevation map, compute how much water it can trap after raining.",
      "examples": "# Input: [0,1,0,2,1,0,1,3,2,1,2,1] -> 6",
      "optimal solution": "# Two pointers approach:\ndef trap(height):\n    left, right = 0, len(height) - 1\n    left_max, right_max = 0, 0\n    water = 0\n    while left < right:\n        if height[left] < height[right]:\n            if height[left] >= left_max:\n                left_max = height[left]\n            else:\n                water += left_max - height[left]\n            left += 1\n        else:\n            if height[right] >= right_max:\n                right_max = height[right]\n            else:\n                water += right_max - height[right]\n            right -= 1\n    return water",
      "efficiency": "O(n)",
      "patterns involved": ["Two Pointers"],
      "solved": false
    },
    {
      "name": "Minimum Window Substring",
      "difficulty": "Hard",
      "instructions": "# Given two strings s and t, return the minimum window in s which will contain all the characters in t.",
      "examples": "# Input: s = 'ADOBECODEBANC', t = 'ABC' -> 'BANC'",
      "optimal solution": "# Sliding window (two pointers):\ndef minWindow(s, t):\n    from collections import Counter\n    need = Counter(t)\n    missing = len(t)\n    left, start, min_len = 0, 0, float('inf')\n\n    for right, char in enumerate(s):\n        if need[char] > 0:\n            missing -= 1\n        need[char] -= 1\n        while missing == 0:\n            if (right - left + 1) < min_len:\n                start = left\n                min_len = right - left + 1\n            need[s[left]] += 1\n            if need[s[left]] > 0:\n                missing += 1\n            left += 1\n    return '' if min_len == float('inf') else s[start:start+min_len]",
      "efficiency": "O(n)",
      "patterns involved": ["Two Pointers", "Sliding Window"],
      "solved": false
    }
  ]